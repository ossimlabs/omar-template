buildscript {
    repositories {
        mavenLocal()
		maven { url ossimMavenProxy }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
        classpath "io.ossim:gradleDefaults:${gradleDefaultsVersion}"
    }
}

plugins {
	id "com.github.ben-manes.versions" version "0.21.0"
// 	id 'com.bmuschko.docker-remote-api' version '4.6.2'
}

subprojects { project ->
	// version projectVersion
	group projectGroup

	boolean isGrailsApp = project.name.endsWith( '-app' )
	boolean isGrailsPlugin = project.name.endsWith( '-plugin' )
	boolean isGrailsProject = isGrailsApp || isGrailsPlugin

    apply plugin:"eclipse"
    apply plugin:"idea"

    io.ossim.gradleDefaults.Variables.setAdditionalVariables(project)
    io.ossim.gradleDefaults.Variables.setVersionVariables(project)
    version "${buildVersion}-${buildVersionTag}"

    jarDestination = "${project.projectDir}/build/libs/${project.name}-${version}.jar"


	afterEvaluate {
		project.apply plugin: 'maven-publish'
		
		project.publish.dependsOn assemble
		project.publishToMavenLocal.dependsOn assemble
		
		project.publishing {
			repositories {
				maven {
					url = mavenPublishUrl
					credentials {
						username mavenRepoUsername // System.getenv( 'REPOSITORY_MANAGER_USERNAME' )
						password mavenRepoPassword // System.getenv( 'REPOSITORY_MANAGER_PASSWORD' )
					}
				}
			}
			publications {
				mavenJava( MavenPublication ) {
					from components.java
				}
			}
		}
	}        

    if ( isGrailsApp )        
    {
        dockerBuildDir="${rootProject.projectDir}/docker"
        io.ossim.gradleDefaults.Docker.addDockerTasks(project, dockerRegistryUrl, dockerRegistryUsername, dockerRegistryPassword, name, dockerImageTag, dockerBuildDir, jarDestination, ["BASE_IMAGE": "${dockerRegistryUrl}/${dockerBaseImage}:${dockerFromTag}"])
        io.ossim.gradleDefaults.Openshift.addOpenshiftTasks(project, openshiftUrl, openshiftUsername, openshiftPassword, openshiftProjectName, openshiftServiceName,  dockerRegistryUrl, name, dockerImageTag)
    }
    else if ( isGrailsPlugin )
    {
        // sourceSets.main.output.classesDir = 'build/classes/groovy/main'

        // io.ossim.gradleDefaults.Publications.addPublication(
        //    project, 
        //    groupName, 
        //    name, "${buildVersion}-${buildVersionTag}"
        //    )
        // io.ossim.gradleDefaults.Publications.addRepository(
        //    project, 
        //    mavenPublishUrl, 
        //    mavenRepoUsername, 
        //    mavenRepoPassword
        //    )
    }    

	if ( isGrailsProject )
	{
		if ( isGrailsApp )
		{
            apply plugin:"org.grails.grails-web"
            apply plugin:"com.energizedwork.webdriver-binaries"
            apply plugin:"com.energizedwork.idea-project-components"
		}
		else if ( isGrailsPlugin )
		{ 
            apply plugin:"org.grails.grails-plugin"
            apply plugin:"org.grails.grails-plugin-publish"
        }

        apply plugin:"asset-pipeline"
        apply plugin:"org.grails.grails-gsp"

        repositories {
            mavenLocal()
		    maven { url ossimMavenProxy } 
            maven { url "https://repo.grails.org/grails/core" }
        }

        dependencyManagement {
			imports {
				mavenBom "org.springframework.cloud:spring-cloud-dependencies:${ springCloudVersion }"
			}
		}

        dependencies {
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-web-boot"
            compile "org.grails:grails-logging"
            compile "org.grails:grails-plugin-rest"
            compile "org.grails:grails-plugin-databinding"
            compile "org.grails:grails-plugin-i18n"
            compile "org.grails:grails-plugin-services"
            compile "org.grails:grails-plugin-url-mappings"
            compile "org.grails:grails-plugin-interceptors"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:async"
            compile "org.grails.plugins:scaffolding"
            compile "org.grails.plugins:gsp"
            console "org.grails:grails-console"
            testCompile "org.grails:grails-gorm-testing-support"
            testCompile "org.grails:grails-web-testing-support"
            runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}"

            if ( isGrailsApp )
            {
                compile "org.grails.plugins:events"
                compile "org.grails.plugins:hibernate5"
                compile "org.hibernate:hibernate-core:${hibernateCoreVersion}"
                profile "org.grails.profiles:web"
                runtime "org.glassfish.web:el-impl:${glassfishVersion}"
                runtime "com.h2database:h2"
                runtime "org.apache.tomcat:tomcat-jdbc"
                testCompile "org.grails.plugins:geb"
                testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
                testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
                testRuntime "org.seleniumhq.selenium:selenium-remote-driver:${seleniumVersion}"
                testRuntime "org.seleniumhq.selenium:selenium-api:${seleniumVersion}"

				compile "org.springframework.cloud:spring-cloud-starter-config"
				compile "org.springframework.cloud:spring-cloud-starter-eureka"
            }
            else if ( isGrailsPlugin )
            { 
                profile "org.grails.profiles:web-plugin"
                provided "org.grails:grails-plugin-services"
                provided "org.grails:grails-plugin-domain-class"
                testCompile "org.grails:grails-plugin-testing"
            }
        }
         
        bootRun {
            jvmArgs('-Dspring.output.ansi.enabled=always')
            addResources = true
        }

        if ( isGrailsApp )
        {
            webdriverBinaries {
                chromedriver '2.32'
                geckodriver '0.18.0'
            }

            tasks.withType(Test) {
                systemProperty "geb.env", System.getProperty('geb.env')
                systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
                systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
            }
        }
        else if ( isGrailsPlugin )
        { 
            // enable if you wish to package this plugin as a standalone application
            bootRepackage.enabled = false
            grailsPublish {
                // TODO: Provide values here
                user = 'user'
                key = 'key'
                githubSlug = 'foo/bar'
                license {
                    name = 'Apache-2.0'
                }
                title = "My Plugin"
                desc = "Full plugin description"
                developers = [johndoe:"John Doe"]
            }
        }

        assets {
            if ( isGrailsApp )
            {
                minifyJs = true
                minifyCss = true
            }
            else if ( isGrailsPlugin )
            { 
                packagePlugin = true
            }
        }
    }
}